#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <chrono>
#include <cstdlib>
#include <random>
#include <algorithm>

using namespace std;

class Monster {
    string name;
    int health;
    int attack;
    int defense;
public:
    Monster(string n, int h, int a, int d) : name(n), health(h), attack(a), defense(d) {}
    
    void displayInfo() const {
        cout << name << " [HP: " << health << ", ATK: " << attack << ", DEF: " << defense << "]\n";
    }
    
    void takeDamage(int damage) {
        health -= max(1, damage - defense);
        if (health < 0) health = 0;
    }
    
    bool isAlive() const { return health > 0; }
    int getAttack() const { return attack; }
    string getName() const { return name; }
};

class Character {
    string name;
    int health;
    int attack;
    int defense;
public:
    Character(string n, int h, int a, int d) : name(n), health(h), attack(a), defense(d) {}
    
    void displayInfo() const {
        cout << name << " [HP: " << health << ", ATK: " << attack << ", DEF: " << defense << "]\n";
    }
    
    void takeDamage(int damage) {
        health -= max(1, damage - defense);
        if (health < 0) health = 0;
    }
    
    bool isAlive() const { return health > 0; }
    int getAttack() const { return attack; }
    string getName() const { return name; }
};

vector<Monster> monsters;
mutex monstersMutex;
Character hero("Hero", 100, 20, 10);
mutex heroMutex;

void generateMonsters() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> healthDist(30, 70);
    uniform_int_distribution<> attackDist(5, 15);
    uniform_int_distribution<> defenseDist(2, 8);
    
    vector<string> names = {"Goblin", "Orc", "Skeleton", "Zombie", "Spider"};
    
    while (true) {
        this_thread::sleep_for(chrono::seconds(3));
        
        uniform_int_distribution<> nameDist(0, names.size() - 1);
        string name = names[nameDist(gen)];
        int health = healthDist(gen);
        int attack = attackDist(gen);
        int defense = defenseDist(gen);
        
        lock_guard<mutex> lock(monstersMutex);
        monsters.emplace_back(name, health, attack, defense);
        cout << "New monster appeared: ";
        monsters.back().displayInfo();
    }
}

void battle() {
    while (true) {
        this_thread::sleep_for(chrono::seconds(1));
        
        lock_guard<mutex> lock1(monstersMutex);
        lock_guard<mutex> lock2(heroMutex);
        
        if (monsters.empty()) continue;
        
        Monster& monster = monsters.front();
        
        cout << "\n=== BATTLE ===\n";
        hero.displayInfo();
        monster.displayInfo();
        
        monster.takeDamage(hero.getAttack());
        cout << hero.getName() << " hits " << monster.getName() << "!\n";
        
        if (monster.isAlive()) {
            hero.takeDamage(monster.getAttack());
            cout << monster.getName() << " hits back!\n";
        }
        
        if (!monster.isAlive()) {
            cout << monster.getName() << " was defeated!\n";
            monsters.erase(monsters.begin());
        }
        
        if (!hero.isAlive()) {
            cout << hero.getName() << " was killed! Game over.\n";
            exit(0);
        }
        
        cout << "==============\n\n";
    }
}

int main() {
    cout << "Starting game...\n";
    hero.displayInfo();
    
    thread generator(generateMonsters);
    thread fighter(battle);
    
    generator.detach();
    fighter.detach();
    
    while (true) {
        this_thread::sleep_for(chrono::seconds(1));
        
        lock_guard<mutex> lock(monstersMutex);
        cout << "\nCurrent monsters (" << monsters.size() << "):\n";
        for (auto& m : monsters) {
            m.displayInfo();
        }
    }
    
    return 0;
}
